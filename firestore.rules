/**
 * @fileoverview Firestore Security Rules for NexusTalent Platform.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and related data,
 * while allowing public read access to courses and job postings. Administrative
 * privileges are managed via the `userType` field in the user document.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. User-owned.
 * - /courses/{courseId}: Stores course information. Publicly readable, owner-writeable (trainer).
 * - /courses/{courseId}/modules/{moduleId}: Stores course modules. Owner-writeable (trainer).
 * - /enrollments/{enrollmentId}: Stores enrollment records.
 * - /jobPostings/{jobPostingId}: Stores job postings. Publicly readable, owner-writeable (recruiter).
 * - /applications/{applicationId}: Stores job applications.
 *
 * Key Security Decisions:
 * - Users can only read/write their own profile data.
 * - Courses and Job Postings are publicly readable but only the creator (trainer/recruiter) can modify them.
 * - Listing of all users is disallowed.
 * - Data validation is minimized in this prototyping phase, focusing on authorization.
 *
 * Denormalization for Authorization:
 * - Course documents have a `trainerId` field to simplify ownership checks for updates and deletes.
 * - JobPosting documents have a `recruiterId` field for similar ownership checks.
 * - Application documents ID is a composite of `userId_jobPostingId` to enforce uniqueness and simplify security rules.
 *
 * Structural Segregation:
 * - User profiles are stored under `/users/{userId}` for clear ownership.
 * - Courses and Job Postings are stored in top-level collections to enable public read access while controlling writes.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access to user profiles. Users can only read and write their own profile.
     * @path /users/{userId}
     * @allow (create, update, delete): Authenticated user creates their own profile.
     * @allow (get, list): Authenticated user gets their own profile.
     * @deny (create, update, delete): Unauthorized user attempts to create, update, or delete another user's profile.
     * @deny (get, list): Unauthorized user attempts to get another user's profile or list all profiles.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      // Helper function to check if the requesting user is the owner of the document.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the requesting user is the owner of the existing document.
      function isExistingOwner() {
        return resource.data.id == request.auth.uid;
      }
      
      // Helper function to check if user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Disable listing of all users for privacy.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner();
      allow delete: if isSignedIn() && isExistingOwner();
    }

    /**
     * @description Manages access to courses. Anyone can read courses, but only the trainer can modify them.
     * @path /courses/{courseId}
     * @allow (get, list): Any user can read the courses.
     * @allow (create): Authenticated user can create a course, and trainerId must match their UID.
     * @allow (update, delete): Only the trainer (owner) can update or delete the course.
     * @deny (create, update, delete): Unauthorized user attempts to create, update, or delete a course.
     * @principle Allows public read access but enforces ownership for writes.
     */
    match /courses/{courseId} {
      // Helper function to check if the requesting user is the trainer of the course.
      function isTrainer(trainerId) {
        return request.auth.uid == trainerId;
      }

      // Helper function to check if the requesting user is the trainer of the existing course.
      function isExistingTrainer() {
        return resource.data.trainerId == request.auth.uid;
      }

      // Helper function to check if user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && isTrainer(request.resource.data.trainerId);
      allow update: if isSignedIn() && isExistingTrainer();
      allow delete: if isSignedIn() && isExistingTrainer();
    }

    /**
     * @description Manages access to course modules. Only the trainer who owns the course can manage its modules.
     * @path /courses/{courseId}/modules/{moduleId}
     * @allow (create, update, delete): Trainer creates, updates, or deletes modules for their course.
     * @allow (get, list): Any user can view the modules.
     * @deny (create, update, delete): Unauthorized user attempts to create, update, or delete a module.
     * @principle Restricts module management to the course trainer.
     */
    match /courses/{courseId}/modules/{moduleId} {
      // Helper function to check if the requesting user is the trainer of the parent course.
      function isCourseTrainer(courseId) {
        return get(/databases/$(database)/documents/courses/$(courseId)).data.trainerId == request.auth.uid;
      }

      // Helper function to check if user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && isCourseTrainer(courseId);
      allow update: if isSignedIn() && isCourseTrainer(courseId);
      allow delete: if isSignedIn() && isCourseTrainer(courseId);
    }

    /**
     * @description Manages access to enrollments.
     * @path /enrollments/{enrollmentId}
     * @allow (create, update, delete): Authenticated user creates their own enrollment.
     * @allow (get, list): Authenticated user gets their own enrollment.
     * @deny (create, update, delete): Unauthorized user attempts to create, update, or delete another user's enrollment.
     * @deny (get, list): Unauthorized user attempts to get another user's enrollment or list all enrollments.
     * @principle Enforces document ownership for user profiles.
     */
    match /enrollments/{enrollmentId} {
      // Helper function to check if the requesting user is the enrolled user.
      function isEnrolledUser() {
        return resource.data.userId == request.auth.uid;
      }

      // Helper function to check if user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isEnrolledUser();
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isEnrolledUser();
      allow delete: if isSignedIn() && isEnrolledUser();
    }

    /**
     * @description Manages access to job postings. Anyone can read job postings, but only the recruiter can modify them.
     * @path /jobPostings/{jobPostingId}
     * @allow (get, list): Any user can read the job postings.
     * @allow (create): Authenticated user can create a job posting, and recruiterId must match their UID.
     * @allow (update, delete): Only the recruiter (owner) can update or delete the job posting.
     * @deny (create, update, delete): Unauthorized user attempts to create, update, or delete a job posting.
     * @principle Allows public read access but enforces ownership for writes.
     */
    match /jobPostings/{jobPostingId} {
      // Helper function to check if the requesting user is the recruiter of the job posting.
      function isRecruiter(recruiterId) {
        return request.auth.uid == recruiterId;
      }
      // Helper function to check if the requesting user is the trainer of the existing course.
      function isExistingRecruiter() {
        return resource.data.recruiterId == request.auth.uid;
      }

      // Helper function to check if user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && isRecruiter(request.resource.data.recruiterId);
      allow update: if isSignedIn() && isExistingRecruiter();
      allow delete: if isSignedIn() && isExistingRecruiter();
    }

     /**
      * @description Manages access to job applications.
      * @path /applications/{applicationId}
      * @allow (create, update, delete): Authenticated user creates their own application.
      * @allow (get, list): Authenticated user gets their own application.
      * @deny (create, update, delete): Unauthorized user attempts to create, update, or delete another user's application.
      * @deny (get, list): Unauthorized user attempts to get another user's application or list all applications.
      * @principle Enforces document ownership for user profiles.
      */
    match /applications/{applicationId} {
      // Helper function to check if the requesting user is the applicant.
      function isApplicant(applicationId) {
        let userId = applicationId.split("_")[0];
        return request.auth.uid == userId;
      }

      // Helper function to check if user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isApplicant(applicationId);
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && isApplicant(applicationId);
      allow delete: if isSignedIn() && isApplicant(applicationId);
    }
  }
}