/**
 * @file Firebase Security Rules for NexusTalent Platform
 * @core_philosophy This ruleset enforces a strict user-ownership model for user profiles and related data,
 * while allowing public read access to courses and job postings. Write access to courses and job postings
 * is restricted to authorized trainers and recruiters, respectively. Applications are restricted to the
 * applicant.
 * @data_structure
 * - /users/{userId}: Stores user profiles, accessible only to the user themselves.
 * - /courses/{courseId}: Stores course information, publicly readable but writable only by trainers.
 * - /courses/{courseId}/modules/{moduleId}: Stores course modules, publicly readable but writable only by trainers.
 * - /enrollments/{enrollmentId}: Stores enrollment records, accessible only to the enrolled user.
 * - /jobPostings/{jobPostingId}: Stores job postings, publicly readable but writable only by recruiters.
 * - /applications/{applicationId}: Stores job applications, accessible only to the applicant. The application ID is a composite of userId_jobPostingId
 * @key_security_decisions
 * - User listing is explicitly disallowed for privacy.
 * - Public read access is granted to courses and job postings to maximize visibility.
 * - Ownership is enforced through path-based security rules and document fields (e.g., trainerId, recruiterId).
 * - The rules leverage denormalization to avoid complex queries and ensure efficient security checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own profile data.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if request.auth.uid == userId
     * @deny (get, create, update, delete) if request.auth.uid != userId
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      //function isAdmin() {
       // return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userType == 'admin';
      //}

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read course data, but only trainers can create, update, or delete courses.
     * @path /courses/{courseId}
     * @allow (get, list) if true
     * @allow (create) if request.auth.uid == request.resource.data.trainerId
     * @allow (update, delete) if resource.data.trainerId == request.auth.uid
     * @deny (create, update, delete) if request.auth.uid != resource.data.trainerId
     * @principle Allows public read access with owner-only writes, validated by the trainerId field.
     */
    match /courses/{courseId} {
      function isTrainer(trainerId) {
        return request.auth.uid == trainerId;
      }
        function isExistingTrainer(trainerId) {
          return isTrainer(trainerId) && resource != null;
        }
      allow get, list: if true;
      allow create: if isTrainer(request.resource.data.trainerId);
      allow update: if isExistingTrainer(resource.data.trainerId);
      allow delete: if isExistingTrainer(resource.data.trainerId);
    }

    /**
     * @description Allows anyone to read course module data, but only trainers can create, update, or delete modules.
     * @path /courses/{courseId}/modules/{moduleId}
     * @allow (get, list) if true
     * @allow (create) if get(/databases/$(database)/documents/courses/$(courseId)).data.trainerId == request.auth.uid
     * @allow (update, delete) if get(/databases/$(database)/documents/courses/$(courseId)).data.trainerId == request.auth.uid
     * @deny (create, update, delete) if get(/databases/$(database)/documents/courses/$(courseId)).data.trainerId != request.auth.uid
     * @principle Allows public read access with trainer-only writes, validated by the trainerId field on the parent course.
     */
    match /courses/{courseId}/modules/{moduleId} {
      function isTrainerOfCourse(courseId) {
        return get(/databases/$(database)/documents/courses/$(courseId)).data.trainerId == request.auth.uid;
      }

      function isExistingTrainerOfCourse(courseId) {
        return isTrainerOfCourse(courseId) && resource != null;
      }

      allow get, list: if true;
      allow create: if isTrainerOfCourse(courseId);
      allow update: if isExistingTrainerOfCourse(courseId);
      allow delete: if isExistingTrainerOfCourse(courseId);
    }

    /**
     * @description Allows users to read and write their own enrollment data.
     * @path /enrollments/{enrollmentId}
     * @allow (get, list) if request.auth.uid == resource.data.userId
     * @allow (create) if request.auth.uid == request.resource.data.userId
     * @allow (update, delete) if request.auth.uid == resource.data.userId
     * @deny (get, list, create, update, delete) if request.auth.uid != resource.data.userId
     * @principle Enforces document ownership for all operations, validated by the userId field.
     */
    match /enrollments/{enrollmentId} {
      function isEnrolledUser(userId) {
        return request.auth.uid == userId;
      }
      function isExistingEnrolledUser(userId) {
        return isEnrolledUser(userId) && resource != null;
      }
      allow get, list: if isEnrolledUser(resource.data.userId);
      allow create: if isEnrolledUser(request.resource.data.userId);
      allow update: if isExistingEnrolledUser(resource.data.userId);
      allow delete: if isExistingEnrolledUser(resource.data.userId);
    }

    /**
     * @description Allows anyone to read job posting data, but only recruiters can create, update, or delete job postings.
     * @path /jobPostings/{jobPostingId}
     * @allow (get, list) if true
     * @allow (create) if request.auth.uid == request.resource.data.recruiterId
     * @allow (update, delete) if resource.data.recruiterId == request.auth.uid
     * @deny (create, update, delete) if request.auth.uid != resource.data.recruiterId
     * @principle Allows public read access with owner-only writes, validated by the recruiterId field.
     */
    match /jobPostings/{jobPostingId} {
      function isRecruiter(recruiterId) {
        return request.auth.uid == recruiterId;
      }
      function isExistingRecruiter(recruiterId) {
        return isRecruiter(recruiterId) && resource != null;
      }
      allow get, list: if true;
      allow create: if isRecruiter(request.resource.data.recruiterId);
      allow update: if isExistingRecruiter(resource.data.recruiterId);
      allow delete: if isExistingRecruiter(resource.data.recruiterId);
    }

    /**
     * @description Allows users to read and write their own application data.
     *              The application ID is a composite of userId_jobPostingId.
     * @path /applications/{applicationId}
     * @allow (get, list) if request.auth.uid == resource.data.userId
     * @allow (create) if request.auth.uid == request.resource.data.userId
     * @allow (update, delete) if request.auth.uid == resource.data.userId
     * @deny (get, list, create, update, delete) if request.auth.uid != resource.data.userId
     * @principle Enforces document ownership for all operations, validated by the userId field.
     */
    match /applications/{applicationId} {
      function isApplicant(userId) {
        return request.auth.uid == userId;
      }

      function isExistingApplicant(userId) {
          return isApplicant(userId) && resource != null;
      }

      allow get, list: if isApplicant(resource.data.userId);
      allow create: if isApplicant(request.resource.data.userId);
      allow update: if isExistingApplicant(resource.data.userId);
      allow delete: if isExistingApplicant(resource.data.userId);
    }
  }
}