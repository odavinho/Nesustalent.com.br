/**
 * @file Firebase Security Rules for NexusTalent Platform
 *
 * @Core Philosophy:
 *   This ruleset enforces a strict user-ownership model for user profiles and related data,
 *   combined with role-based access control for courses and job postings. The primary goal is
 *   to ensure that users can only access their own data, while authorized personnel
 *   (e.g., trainers and recruiters) can manage relevant content. Data validation is intentionally
 *   relaxed during this prototyping phase to accelerate development.
 *
 * @Data Structure:
 *   - /users/{userId}: Stores user profiles, with 'userType' indicating role (student, instructor, recruiter, admin).
 *   - /courses/{courseId}: Stores course information, including a 'trainerId' for ownership.
 *   - /courses/{courseId}/modules/{moduleId}: Stores modules within each course.
 *   - /enrollments/{enrollmentId}: Stores enrollment records, linking users to courses.
 *   - /jobPostings/{jobPostingId}: Stores job postings, including a 'recruiterId' for ownership.
 *   - /applications/{applicationId}: Stores job applications, with the document ID being a composite of 'userId_jobPostingId'.
 *
 * @Key Security Decisions:
 *   - User listing is generally disallowed to protect privacy.
 *   - Write access to user profiles is restricted to the owner (the user themselves).
 *   - Course creation, modification, and deletion are allowed for trainers (users with 'userType' as 'instructor').
 *   - Job posting creation, modification, and deletion are allowed for recruiters (users with 'userType' as 'recruiter').
 *   - Applications can only be created if the ID matches 'userId_jobPostingId' to prevent spoofing.
 *   - Flexible data validation is used during prototyping to accelerate development.
 *
 * @Denormalization for Authorization:
 *   - The 'trainerId' field in the /courses/{courseId} document enables efficient checking of trainer ownership without needing to query a separate collection.
 *   - The 'recruiterId' field in the /jobPostings/{jobPostingId} document enables efficient checking of recruiter ownership.
 *   - The /applications/{applicationId} id is composed of 'userId_jobPostingId' for easy rule checking and preventing spoofing.
 *
 * @Structural Segregation:
 *   - User-specific data is nested under /users/{userId} to enforce ownership.
 *   - Public course and job posting data are stored in top-level collections for easy access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profiles. Allows users to read and write their own profiles.
     * @path /users/{userId}
     * @allow (create) - User with ID 'user123' creates their profile. request.auth.uid == 'user123'
     * @allow (get) - User with ID 'user123' reads their profile. request.auth.uid == 'user123'
     * @allow (update) - User with ID 'user123' updates their profile. request.auth.uid == 'user123'
     * @deny (create) - User with ID 'user456' tries to create a profile for 'user123'. request.auth.uid == 'user456'
     * @deny (update) - User with ID 'user456' tries to update the profile of 'user123'. request.auth.uid == 'user456'
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.id == userId;
      allow delete: if false;
    }

    /**
     * @description Manages course information. Allows trainers to manage courses.
     * @path /courses/{courseId}
     * @allow (create) - Trainer creates a new course. request.auth.uid == trainerId
     * @allow (get) - Any signed-in user can read course details. request.auth != null
     * @allow (update) - Trainer updates an existing course they own. request.auth.uid == trainerId
     * @deny (create) - Non-trainer attempts to create a course.
     * @deny (update) - Non-trainer attempts to update a course.
     * @principle Enforces document ownership for writes, public reads.
     */
    match /courses/{courseId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.trainerId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.trainerId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.trainerId == request.auth.uid;
    }

    /**
     * @description Manages course modules within a course. Allows trainers to manage modules for their courses.
     * @path /courses/{courseId}/modules/{moduleId}
     * @allow (create) - Trainer creates a module in a course they own. request.auth.uid == trainerId
     * @allow (get) - Any signed-in user can read module details. request.auth != null
     * @allow (update) - Trainer updates a module in a course they own. request.auth.uid == trainerId
     * @deny (create) - Non-trainer attempts to create a module in a course.
     * @deny (update) - Non-trainer attempts to update a module in a course.
     * @principle Enforces document ownership for writes, public reads.
     */
    match /courses/{courseId}/modules/{moduleId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Manages enrollment records. Allows users to read their own enrollment records.
     * @path /enrollments/{enrollmentId}
     * @allow (create) - User creates an enrollment record. request.auth.uid == userId
     * @allow (get) - User reads their own enrollment record. request.auth.uid == userId
     * @allow (update) - User updates their own enrollment record. request.auth.uid == userId
     * @deny (create) - User attempts to create an enrollment record for another user.
     * @deny (update) - User attempts to update an enrollment record for another user.
     * @principle Enforces document ownership for writes.
     */
    match /enrollments/{enrollmentId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if false;
    }

    /**
     * @description Manages job postings. Allows recruiters to manage job postings.
     * @path /jobPostings/{jobPostingId}
     * @allow (create) - Recruiter creates a new job posting. request.auth.uid == recruiterId
     * @allow (get) - Any signed-in user can read job posting details. request.auth != null
     * @allow (update) - Recruiter updates an existing job posting they own. request.auth.uid == recruiterId
     * @deny (create) - Non-recruiter attempts to create a job posting.
     * @deny (update) - Non-recruiter attempts to update a job posting.
     * @principle Enforces document ownership for writes, public reads.
     */
    match /jobPostings/{jobPostingId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.recruiterId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.recruiterId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.recruiterId == request.auth.uid;
    }

    /**
     * @description Manages job applications.
     * @path /applications/{applicationId}
     * @allow (create) - User creates a new application for a job posting. The application ID must be a composite of userId_jobPostingId.
     * @allow (get) - Any signed-in user can read an application if they're the applicant.
     * @allow (update) - User updates their own application.
     * @deny (create) - User attempts to create an application with an invalid composite ID.
     * @deny (update) - User attempts to update an application they don't own.
     * @principle Enforces document ownership for writes.
     */
    match /applications/{applicationId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if false;
    }
  }
}