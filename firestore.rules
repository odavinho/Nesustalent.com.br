/**
 * @fileoverview Firestore Security Rules for NexusTalent Platform.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and related data,
 * and a recruiter-ownership model for job postings. It also leverages role-based
 * access control for admin users. Data consistency is enforced where necessary
 * to maintain relational integrity.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles.
 * - /courses/{courseId}: Stores course information.
 * - /courses/{courseId}/modules/{moduleId}: Stores course modules.
 * - /enrollments/{enrollmentId}: Stores enrollment records.
 * - /jobPostings/{jobPostingId}: Stores job postings.
 * - /applications/{applicationId}: Stores job applications, with a composite ID of userId_jobPostingId.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profiles.
 * - Recruiters can create, update, and delete their own job postings.
 * - Applications can only be created with correct composite key of `userId_jobPostingId`.
 * - Listing operations are generally restricted to owners or admins.
 * - The ruleset prioritizes strict authorization and omits detailed data validation to
 *   facilitate rapid prototyping.
 *
 * Denormalization for Authorization:
 * - The JobPosting entity stores the recruiterId to simplify authorization checks for job postings.
 * - The Application entity's ID is a composite of userId and jobPostingId to enforce uniqueness and simplify security rules.
 *
 * Structural Segregation:
 * - User-specific data is stored under /users/{userId} to clearly delineate ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own profile data.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if isSignedIn() && isOwner(userId)
     * @allow (list) if isSignedIn() && isOwner(userId)
     * @deny (create) if isSignedIn() && !isOwner(userId)
     * @deny (update) if isSignedIn() && !isOwner(userId)
     * @deny (delete) if isSignedIn() && !isExistingOwner(userId)
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read courses, but only instructors to create, update, and delete them.
     * @path /courses/{courseId}
     * @allow (get, list) if true
     * @allow (create, update, delete) if isSignedIn() && isInstructor(request.auth.uid)
     * @deny (create) if !isSignedIn() || !isInstructor(request.auth.uid)
     * @deny (update) if !isSignedIn() || !isInstructor(request.auth.uid)
     * @deny (delete) if !isSignedIn() || !isInstructor(request.auth.uid)
     * @principle Public read access with instructor-only writes.
     */
    match /courses/{courseId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isInstructor(userId) {
            return get(/databases/$(database)/documents/users/$(userId)).data.userType == 'instructor';
        }

        allow get, list: if true;
        allow create: if isSignedIn() && isInstructor(request.auth.uid);
        allow update: if isSignedIn() && isInstructor(request.auth.uid) && resource != null;
        allow delete: if isSignedIn() && isInstructor(request.auth.uid) && resource != null;
    }

    /**
     * @description Allows anyone to read course modules, but only instructors to create, update, and delete them.
     * @path /courses/{courseId}/modules/{moduleId}
     * @allow (get, list) if true
     * @allow (create, update, delete) if isSignedIn() && isInstructor(get(/databases/$(database)/documents/courses/$(courseId)).data.trainerId)
     * @deny (create) if !isSignedIn() || !isInstructor(get(/databases/$(database)/documents/courses/$(courseId)).data.trainerId)
     * @deny (update) if !isSignedIn() || !isInstructor(get(/databases/$(database)/documents/courses/$(courseId)).data.trainerId)
     * @deny (delete) if !isSignedIn() || !isInstructor(get(/databases/$(database)/documents/courses/$(courseId)).data.trainerId)
     * @principle Public read access with instructor-only writes.
     */
    match /courses/{courseId}/modules/{moduleId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isInstructor(trainerId) {
            return request.auth.uid == trainerId;
        }

        allow get, list: if true;
        allow create: if isSignedIn() && isInstructor(get(/databases/$(database)/documents/courses/$(courseId)).data.trainerId);
        allow update: if isSignedIn() && isInstructor(get(/databases/$(database)/documents/courses/$(courseId)).data.trainerId) && resource != null;
        allow delete: if isSignedIn() && isInstructor(get(/databases/$(database)/documents/courses/$(courseId)).data.trainerId) && resource != null;
    }

    /**
     * @description Allows users to read and write their own enrollments.
     * @path /enrollments/{enrollmentId}
     * @allow (get, list) if isSignedIn() && isOwner(resource.data.userId)
     * @allow (create) if isSignedIn() && isOwner(request.resource.data.userId)
     * @allow (update) if isSignedIn() && isOwner(resource.data.userId)
     * @allow (delete) if isSignedIn() && isOwner(resource.data.userId)
     * @deny (create) if !isSignedIn() || !isOwner(request.resource.data.userId)
     * @deny (update) if !isSignedIn() || !isOwner(resource.data.userId)
     * @deny (delete) if !isExistingOwner(resource.data.userId)
     * @principle Enforces document ownership for enrollments.
     */
    match /enrollments/{enrollmentId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(resource.data.userId);
      allow list: if isSignedIn() && isOwner(resource.data.userId);
      allow create: if isSignedIn() && isOwner(request.resource.data.userId);
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Allows recruiters to create, read, update, and delete their own job postings.
     * @path /jobPostings/{jobPostingId}
     * @allow (get, list) if true
     * @allow (create) if isSignedIn() && isRecruiter(request.auth.uid) && request.resource.data.recruiterId == request.auth.uid
     * @allow (update) if isSignedIn() && isRecruiter(request.auth.uid) && resource != null && resource.data.recruiterId == request.auth.uid
     * @allow (delete) if isSignedIn() && isRecruiter(request.auth.uid) && resource != null && resource.data.recruiterId == request.auth.uid
     * @deny (create) if !isSignedIn() || !isRecruiter(request.auth.uid) || request.resource.data.recruiterId != request.auth.uid
     * @deny (update) if !isSignedIn() || !isRecruiter(request.auth.uid) || resource == null || resource.data.recruiterId != request.auth.uid
     * @deny (delete) if !isSignedIn() || !isRecruiter(request.auth.uid) || resource == null || resource.data.recruiterId != request.auth.uid
     * @principle Enforces recruiter ownership for job postings.
     */
    match /jobPostings/{jobPostingId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isRecruiter(userId) {
        return get(/databases/$(database)/documents/users/$(userId)).data.userType == 'recruiter';
      }

      allow get, list: if true;
      allow create: if isSignedIn() && isRecruiter(request.auth.uid) && request.resource.data.recruiterId == request.auth.uid;
      allow update: if isSignedIn() && isRecruiter(request.auth.uid) && resource != null && resource.data.recruiterId == request.auth.uid;
      allow delete: if isSignedIn() && isRecruiter(request.auth.uid) && resource != null && resource.data.recruiterId == request.auth.uid;
    }

    /**
     * @description Allows users to create applications for job postings. The applicationId is a composite of userId and jobPostingId.
     * @path /applications/{applicationId}
     * @allow (get) if isSignedIn() && isOwner(resource.data.userId)
     * @allow (list) if isSignedIn() && isOwner(resource.data.userId)
     * @allow (create) if isSignedIn() && isCorrectApplicationId(request.auth.uid, applicationId)
     * @allow (update) if isSignedIn() && isOwner(resource.data.userId) && resource != null
     * @allow (delete) if isSignedIn() && isOwner(resource.data.userId) && resource != null
     * @deny (create) if !isSignedIn() || !isCorrectApplicationId(request.auth.uid, applicationId)
     * @deny (update) if !isSignedIn() || !isOwner(resource.data.userId) || resource == null
     * @deny (delete) if !isSignedIn() || !isOwner(resource.data.userId) || resource == null
     * @principle Enforces user ownership for applications and validates the composite applicationId.
     */
    match /applications/{applicationId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isCorrectApplicationId(userId, applicationId) {
        return applicationId == userId + "_" + request.resource.data.jobPostingId;
      }

      allow get: if isSignedIn() && isOwner(resource.data.userId);
      allow list: if isSignedIn() && isOwner(resource.data.userId);
      allow create: if isSignedIn() && isCorrectApplicationId(request.auth.uid, applicationId);
      allow update: if isSignedIn() && isOwner(resource.data.userId) && resource != null;
      allow delete: if isSignedIn() && isOwner(resource.data.userId) && resource != null;
    }
  }
}