/**
 * @fileoverview Firestore Security Rules for the NexusTalent platform.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and a role-based model for job postings and courses.
 * It prioritizes security by default, denying access unless explicitly granted.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles.  Access is restricted to the owning user.
 * - /courses/{courseId}: Stores course information.
 * - /courses/{courseId}/modules/{moduleId}: Stores course modules. Access is restricted to the course trainer.
 * - /enrollments/{enrollmentId}: Stores enrollment records. Access is restricted to the enrolled user.
 * - /vacancies/{vacancyId}: Stores job postings. Access is restricted to the recruiter who created the posting.
 * - /applications/{applicationId}: Stores job applications. Access is restricted to the applicant and the recruiter who created the job posting.
 *
 * Key Security Decisions:
 * - Users can only read/write their own profile data.
 * - Recruiters can only create/update/delete their own job postings.
 * - Listing of the `/users` collection is denied to prevent unauthorized data access.
 *
 * Denormalization for Authorization:
 * - JobPosting documents have `recruiterId` to authorize recruiter access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for user profiles.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile if the userId matches their auth UID.
     * @allow (get, update, delete) - Authenticated user can access their own profile if the userId matches their auth UID.
     * @deny (create) - An unauthenticated user cannot create a profile.
     * @deny (get, update, delete) - A different user cannot access another user's profile.
     * @deny (list) - Listing all users is prohibited.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      // Only allow a user to create their own profile.
      allow create: if isOwner(userId);

      // Only allow the owner to read their profile.
      allow get: if isOwner(userId);

      // Only allow the owner to update their own profile, and enforce immutability of the id field.
      allow update: if isExistingOwner(userId);

      // Only allow the owner to delete their own profile.
      allow delete: if isExistingOwner(userId);

      // No one can list all users.
      allow list: if false;
    }

    /**
     * @description Allows public read access to courses, but restricts create/update/delete to trainers.
     * @path /courses/{courseId}
     * @allow (get, list) - Anyone can read the courses.
     * @allow (create) - Only trainers can create a course if trainerId in the request matches their auth UID.
     * @allow (update, delete) - Only the trainer who created the course can update or delete it.
     * @deny (create, update, delete) - Non-trainers cannot create/update/delete courses.
     * @principle Allows public read with owner-only writes.
     */
    match /courses/{courseId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isTrainer(trainerId) {
        return isSignedIn() && request.auth.uid == trainerId;
      }

      function isExistingTrainer(trainerId) {
        return isTrainer(trainerId) && resource.data != null;
      }

      // Anyone can read course information.
      allow get, list: if true;

      // Only trainers can create a course, and the trainerId must match the authenticated user.
      allow create: if isSignedIn() && request.resource.data.trainerId == request.auth.uid;

      // Only the trainer who created the course can update or delete it.
      allow update: if isSignedIn() && resource.data.trainerId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.trainerId == request.auth.uid;
    }

    /**
     * @description Restricts access to course modules to the trainer who owns the course.
     * @path /courses/{courseId}/modules/{moduleId}
     * @allow (get, list) - Anyone can read the course modules.
     * @allow (create) - Only the trainer who created the course can add modules.
     * @allow (update, delete) - Only the trainer who created the course can update or delete modules.
     * @deny (create, update, delete) - Other users cannot modify course modules.
     * @principle Enforces ownership based on the parent course's trainerId.
     */
    match /courses/{courseId}/modules/{moduleId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isTrainer(courseId) {
        return isSignedIn() && get(/databases/$(database)/documents/courses/$(courseId)).data.trainerId == request.auth.uid;
      }

       function isExistingTrainer(courseId) {
        return isTrainer(courseId) && resource.data != null;
      }

      // Anyone can read course module information.
      allow get, list: if true;

      // Only the trainer for the parent course can create modules.
      allow create: if isSignedIn() && isTrainer(courseId);

      // Only the trainer for the parent course can update/delete modules.
      allow update: if isSignedIn() && isTrainer(courseId);
      allow delete: if isSignedIn() && isTrainer(courseId);
    }

    /**
     * @description Enforces user-ownership for enrollments.
     * @path /enrollments/{enrollmentId}
     * @allow (create) - Authenticated user can create an enrollment if the userId matches their auth UID.
     * @allow (get, update, delete) - Authenticated user can access their own enrollments if the userId matches their auth UID.
     * @deny (create) - An unauthenticated user cannot create an enrollment.
     * @deny (get, update, delete) - A different user cannot access another user's enrollments.
     * @allow (list) - User can list their own enrollments.
     * @principle Enforces document ownership for all operations.
     */
    match /enrollments/{enrollmentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isEnrolledUser(enrollmentId) {
          return isSignedIn() && get(/databases/$(database)/documents/enrollments/$(enrollmentId)).data.userId == request.auth.uid;
      }

      function isExistingEnrolledUser(enrollmentId) {
        return isEnrolledUser(enrollmentId) && resource.data != null;
      }

      // Only allow a user to create their own enrollment.
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;

      // Only allow the enrolled user to read their enrollment.
      allow get: if isSignedIn() && resource.data.userId == request.auth.uid;

      // Only allow the enrolled user to update their own enrollment.
      allow update: if isSignedIn() && resource.data.userId == request.auth.uid;

      // Only allow the enrolled user to delete their own enrollment.
      allow delete: if isSignedIn() && resource.data.userId == request.auth.uid;

      // Allow the user to list their own enrollments.
      allow list: if isSignedIn() && resource.data.userId == request.auth.uid;
    }

    /**
     * @description Allows recruiters to manage their own job postings.
     * @path /vacancies/{vacancyId}
     * @allow (get, list) - Anyone can read and list job postings.
     * @allow (create) - Only recruiters can create job postings, and the recruiterId must match their auth UID.
     * @allow (update, delete) - Only the recruiter who created the job posting can update or delete it.
     * @deny (create, update, delete) - Non-recruiters cannot create/update/delete job postings.
     * @principle Enforces ownership for writes, allows public reads.
     */
    match /vacancies/{vacancyId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isRecruiter(recruiterId) {
        return isSignedIn() && request.auth.uid == recruiterId;
      }

      function isExistingRecruiter(recruiterId) {
        return isRecruiter(recruiterId) && resource.data != null;
      }

      // Anyone can read job postings.
      allow get, list: if true;

      // Only recruiters can create job postings, and the recruiterId must match the authenticated user.
      allow create: if isSignedIn() && request.resource.data.recruiterId == request.auth.uid;

      // Only the recruiter who created the job posting can update or delete it.
      allow update: if isSignedIn() && resource.data.recruiterId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.recruiterId == request.auth.uid;
    }

    /**
     * @description Enforces user-ownership and recruiter access for job applications.
     * @path /applications/{applicationId}
     * @allow (create) - Authenticated user can create an application if the userId matches their auth UID.
     * @allow (get, update, delete) - The applicant and the recruiter who created the job posting can access the application.
     * @deny (create, update, delete) - Other users cannot access the application.
     * @allow (list) - Only the applicant can list their own applications, or a recruiter list applications for their own vacancies.
     * @principle Enforces document ownership and recruiter access.
     */
    match /applications/{applicationId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function getJobId(applicationId) {
            return split(applicationId, '_')[1];
        }

        function isApplicant(applicationId) {
            return isSignedIn() && request.auth.uid == split(applicationId, '_')[0];
        }

        function isRecruiter(jobId) {
            return isSignedIn() && get(/databases/$(database)/documents/vacancies/$(jobId)).data.recruiterId == request.auth.uid;
        }

        function isExistingApplicant(applicationId) {
            return isApplicant(applicationId) && resource.data != null;
        }

        function isExistingRecruiter(jobId) {
            return isRecruiter(jobId) && resource.data != null;
        }

        // Only allow a user to create their own application.
        allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;

        // Only allow the applicant or the recruiter to read the application.
        allow get: if isApplicant(applicationId) || isRecruiter(getJobId(applicationId));

        // Only allow the applicant or the recruiter to update the application.
        allow update: if isApplicant(applicationId) || isRecruiter(getJobId(applicationId));

        // Only allow the applicant or the recruiter to delete the application.
        allow delete: if isApplicant(applicationId) || isRecruiter(getJobId(applicationId));

        // Allow the applicant to list their own applications, or a recruiter list applications for their own vacancies
        allow list: if isSignedIn() && (split(applicationId, '_')[0] == request.auth.uid || isRecruiter(getJobId(applicationId)));
    }
  }
}