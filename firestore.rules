/**
 * @fileoverview Firestore Security Rules for NexusTalent Platform.
 *
 * Core Philosophy:
 * This ruleset enforces a user-centric security model with ownership-based access control for user-specific data,
 * and role-based access control for platform-wide resources.  It leverages denormalization for efficient
 * authorization and structural segregation to maintain a homogenous security posture for list operations.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles.  Each user can only access their own profile data.
 * - /courses/{courseId}: Stores course information.
 * - /courses/{courseId}/modules/{moduleId}: Stores course modules.
 * - /enrollments/{enrollmentId}: Stores enrollment records.
 * - /jobPostings/{jobPostingId}: Stores job postings.
 * - /applications/{applicationId}: Stores job applications, with applicationId being a composite key of userId_jobPostingId.
 *
 * Key Security Decisions:
 * - Users can only read and write their own user data.
 * - Listing of all users is disallowed.
 * - Public read access is not granted to any collection.
 * - The application ID is enforced as a composite key to ensure uniqueness.
 * - Data validation is minimized to focus on ownership and relational integrity in this prototyping phase.
 *
 * Denormalization for Authorization:
 * - Applications use a composite key (userId_jobPostingId) as the document ID, ensuring uniqueness and simplifying owner checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the requesting user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the requesting user is the owner of the document based on the userId.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the requesting user is the owner of the existing document.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource.data.id == userId;
    }

    /**
     * @description Enforces that a string is not empty.
     */
    function isNonEmptyString(str) {
        return str is string && str.size() > 0;
    }

    /**
     * @description Rules for /users/{userId} collection.
     * @path /users/{userId}
     * @allow (get) User with UID 'user123' can read their own profile.
     * @allow (create) User with UID 'user123' can create their own profile if userId matches.
     * @allow (update) User with UID 'user123' can update their own profile.
     * @allow (delete) User with UID 'user123' can delete their own profile.
     * @deny (get) User with UID 'user456' cannot read user 'user123' profile.
     * @deny (create) User with UID 'user123' cannot create user 'user456' profile.
     * @deny (update) User with UID 'user456' cannot update user 'user123' profile.
     * @deny (delete) User with UID 'user456' cannot delete user 'user123' profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Read rules
      allow get: if isOwner(userId);
      allow list: if false; // Disallowing listing all users for privacy.

      // Write rules
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rules for /courses/{courseId} collection.
     * @path /courses/{courseId}
     * @allow (get) Any signed-in user can read course information.
     * @allow (list) Any signed-in user can list courses.
     * @deny (create) Only authenticated users can create a course.  Additional ownership/role checks may be needed in the future.
     * @deny (update) Only authenticated users can update a course. Additional ownership/role checks may be needed in the future.
     * @deny (delete) Only authenticated users can delete a course.  Additional ownership/role checks may be needed in the future.
     * @principle Allows public read access but restricts write access to authenticated users.  Further access control based on roles or ownership may be required.
     */
    match /courses/{courseId} {
      // Read rules
      allow get: if isSignedIn();
      allow list: if isSignedIn();

      // Write rules
      allow create: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rules for /courses/{courseId}/modules/{moduleId} collection.
     * @path /courses/{courseId}/modules/{moduleId}
     * @allow (get) Any signed-in user can read a course module.
     * @allow (list) Any signed-in user can list course modules.
     * @deny (create) Only authenticated users can create a course module.  Additional ownership/role checks may be needed in the future.
     * @deny (update) Only authenticated users can update a course module. Additional ownership/role checks may be needed in the future.
     * @deny (delete) Only authenticated users can delete a course module.  Additional ownership/role checks may be needed in the future.
     * @principle Allows public read access but restricts write access to authenticated users.  Further access control based on roles or ownership may be required.
     */
    match /courses/{courseId}/modules/{moduleId} {
      // Read rules
      allow get: if isSignedIn();
      allow list: if isSignedIn();

      // Write rules
      allow create: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rules for /enrollments/{enrollmentId} collection.
     * @path /enrollments/{enrollmentId}
     * @allow (get) Any signed-in user can read an enrollment record.
     * @allow (list) Any signed-in user can list enrollment records.
     * @deny (create) Only authenticated users can create an enrollment record.  Additional ownership/role checks may be needed in the future.
     * @deny (update) Only authenticated users can update an enrollment record. Additional ownership/role checks may be needed in the future.
     * @deny (delete) Only authenticated users can delete an enrollment record.  Additional ownership/role checks may be needed in the future.
     * @principle Allows public read access but restricts write access to authenticated users.  Further access control based on roles or ownership may be required.
     */
    match /enrollments/{enrollmentId} {
      // Read rules
      allow get: if isSignedIn();
      allow list: if isSignedIn();

      // Write rules
      allow create: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rules for /jobPostings/{jobPostingId} collection.
     * @path /jobPostings/{jobPostingId}
     * @allow (get) Any signed-in user can read a job posting.
     * @allow (list) Any signed-in user can list job postings.
     * @deny (create) Only authenticated users can create a job posting.  Additional ownership/role checks may be needed in the future.
     * @deny (update) Only authenticated users can update a job posting. Additional ownership/role checks may be needed in the future.
     * @deny (delete) Only authenticated users can delete a job posting.  Additional ownership/role checks may be needed in the future.
     * @principle Allows public read access but restricts write access to authenticated users.  Further access control based on roles or ownership may be required.
     */
    match /jobPostings/{jobPostingId} {
      // Read rules
      allow get: if isSignedIn();
      allow list: if isSignedIn();

      // Write rules
      allow create: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rules for /applications/{applicationId} collection.
     * @path /applications/{applicationId}
     * @allow (get) Any signed-in user can read an application.
     * @allow (list) Any signed-in user can list applications.
     * @deny (create) Only authenticated users can create an application.  Additional ownership/role checks may be needed in the future.
     * @deny (update) Only authenticated users can update an application. Additional ownership/role checks may be needed in the future.
     * @deny (delete) Only authenticated users can delete an application.  Additional ownership/role checks may be needed in the future.
     */
    match /applications/{applicationId} {
      // Read rules
      allow get: if isSignedIn();
      allow list: if isSignedIn();

      // Write rules
      allow create: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }
}