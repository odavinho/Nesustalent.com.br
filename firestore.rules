/**
 * @fileoverview Firestore Security Rules for NexusTalent Platform.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and related data,
 * while allowing public read access to courses and job postings. Administrative
 * privileges are managed through the `userType` field in user documents.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. Each user can only access their own profile.
 * - /courses/{courseId}: Stores course information, publicly readable.
 * - /courses/{courseId}/modules/{moduleId}: Stores course modules, publicly readable.
 * - /enrollments/{enrollmentId}: Stores enrollment records, access restricted to the enrolled user.
 * - /jobPostings/{jobPostingId}: Stores job postings, publicly readable.
 * - /applications/{applicationId}: Stores job applications. Each application id is a composite key: userId_jobPostingId
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect user privacy.
 * - Public read access is granted to courses and job postings to facilitate discovery.
 * - The `applicationId` is enforced as a composite key to simplify application access rules and ensure uniqueness.
 * - Data validation is limited to authorization-critical fields to allow for rapid prototyping.
 *
 * Denormalization for Authorization:
 * - The `trainerId` field in the `/courses/{courseId}` document enables efficient filtering of courses by trainers.
 * - The `userId` and `courseId` fields are denormalized into the `enrollments` collection to allow efficient querying of enrollments by user or course.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user profiles, allowing only the owner to read and write.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if isSignedIn() && isOwner(userId)
     * @deny (get) if !isSignedIn()
     * @deny (create) if !isSignedIn() || !isOwner(userId)
     * @deny (update) if !isSignedIn() || !isOwner(userId)
     * @deny (delete) if !isSignedIn() || !isOwner(userId)
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      //Read rules
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;

      //Write Rules
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.id == request.resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Secures course information, allowing public read but owner-only writes.
     * @path /courses/{courseId}
     * @allow (get, list) if true
     * @allow (create, update, delete) if isSignedIn() && isTrainer(resource.data.trainerId)
     * @deny (create) if !isSignedIn()
     * @deny (update) if !isSignedIn() || !isTrainer(resource.data.trainerId)
     * @deny (delete) if !isSignedIn() || !isTrainer(resource.data.trainerId)
     * @principle Allows public read access while enforcing trainer ownership for writes.
     */
    match /courses/{courseId} {
      //Read rules
      allow get, list: if true;

      //Write Rules
      allow create: if isSignedIn() && isTrainer(request.resource.data.trainerId);
      allow update: if isSignedIn() && isTrainer(resource.data.trainerId);
      allow delete: if isSignedIn() && isExistingTrainer(resource.data.trainerId);

    }

    /**
     * @description Secures course modules, allowing public read access but owner-only writes.
     * @path /courses/{courseId}/modules/{moduleId}
     * @allow (get, list) if true
     * @allow (create, update, delete) if isSignedIn() && isTrainer(get(/databases/$(database)/documents/courses/$(courseId)).data.trainerId)
     * @deny (create) if !isSignedIn()
     * @deny (update) if !isSignedIn() || !isTrainer(get(/databases/$(database)/documents/courses/$(courseId)).data.trainerId)
     * @deny (delete) if !isSignedIn() || !isTrainer(get(/databases/$(database)/documents/courses/$(courseId)).data.trainerId)
     * @principle Allows public read access while enforcing trainer ownership for writes, checked via the parent course document.
     */
    match /courses/{courseId}/modules/{moduleId} {
      //Read rules
      allow get, list: if true;

      //Write Rules
      allow create: if isSignedIn() && isTrainer(get(/databases/$(database)/documents/courses/$(courseId)).data.trainerId);
      allow update: if isSignedIn() && isTrainer(get(/databases/$(database)/documents/courses/$(courseId)).data.trainerId);
      allow delete: if isSignedIn() && isExistingTrainerFromCourse(courseId);
    }

    /**
     * @description Secures enrollment records, allowing only the enrolled user to read and write.
     * @path /enrollments/{enrollmentId}
     * @allow (get, create, update, delete) if isSignedIn() && isEnrolledUser(resource.data.userId)
     * @deny (get) if !isSignedIn()
     * @deny (create) if !isSignedIn() || !isEnrolledUser(resource.data.userId)
     * @deny (update) if !isSignedIn() || !isEnrolledUser(resource.data.userId)
     * @deny (delete) if !isSignedIn() || !isEnrolledUser(resource.data.userId)
     * @principle Enforces document ownership for writes and restricts access to a user's own enrollments.
     */
    match /enrollments/{enrollmentId} {
      //Read rules
      allow get: if isSignedIn() && isEnrolledUser(resource.data.userId);
      allow list: if isSignedIn() && isEnrolledUser(resource.data.userId);

      //Write Rules
      allow create: if isSignedIn() && isEnrolledUser(request.resource.data.userId);
      allow update: if isSignedIn() && isEnrolledUser(resource.data.userId);
      allow delete: if isSignedIn() && isExistingEnrolledUser(resource.data.userId);
    }

    /**
     * @description Secures job postings, allowing public read access but recruiter-only writes.
     * @path /jobPostings/{jobPostingId}
     * @allow (get, list) if true
     * @allow (create, update, delete) if isSignedIn() && isRecruiter(resource.data.recruiterId)
     * @deny (create) if !isSignedIn()
     * @deny (update) if !isSignedIn() || !isRecruiter(resource.data.recruiterId)
     * @deny (delete) if !isSignedIn() || !isRecruiter(resource.data.recruiterId)
     * @principle Allows public read access while enforcing recruiter ownership for writes.
     */
    match /jobPostings/{jobPostingId} {
      //Read rules
      allow get, list: if true;

      //Write Rules
      allow create: if isSignedIn() && isRecruiter(request.resource.data.recruiterId);
      allow update: if isSignedIn() && isRecruiter(resource.data.recruiterId);
      allow delete: if isSignedIn() && isExistingRecruiter(resource.data.recruiterId);
    }

    /**
     * @description Secures job applications, allowing only the applicant to read and write.
     * @path /applications/{applicationId}
     * @allow (get, create, update, delete) if isSignedIn() && isApplicant(applicationId)
     * @deny (get) if !isSignedIn()
     * @deny (create) if !isSignedIn() || !isApplicant(applicationId)
     * @deny (update) if !isSignedIn() || !isApplicant(applicationId)
     * @deny (delete) if !isSignedIn() || !isApplicant(applicationId)
     * @principle Enforces document ownership and ensures access is limited to the applicant.
     */
    match /applications/{applicationId} {
      //Read rules
      allow get: if isSignedIn() && isApplicant(applicationId);
      allow list: if false;

      //Write Rules
      allow create: if isSignedIn() && isApplicant(applicationId) && request.resource.data.id == applicationId;
      allow update: if isSignedIn() && isApplicant(applicationId) && request.resource.data.id == applicationId;
      allow delete: if isSignedIn() && isExistingApplicant(applicationId);
    }

    // ---- Helper Functions ----
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isTrainer(trainerId) {
        return request.auth.uid == trainerId;
    }

    function isRecruiter(recruiterId) {
        return request.auth.uid == recruiterId;
    }

    function isEnrolledUser(userId) {
        return request.auth.uid == userId;
    }

    function isApplicant(applicationId) {
        let userId = applicationId.split("_")[0];
        return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    function isExistingTrainer(trainerId) {
      return isTrainer(trainerId) && resource != null;
    }

    function isExistingRecruiter(recruiterId) {
      return isRecruiter(recruiterId) && resource != null;
    }

    function isExistingEnrolledUser(userId) {
      return isEnrolledUser(userId) && resource != null;
    }

    function isExistingApplicant(applicationId) {
        return isApplicant(applicationId) && resource != null;
    }

    function isExistingTrainerFromCourse(courseId) {
        return isTrainer(get(/databases/$(database)/documents/courses/$(courseId)).data.trainerId) && resource != null;
    }
  }
}