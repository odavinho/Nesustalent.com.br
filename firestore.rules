/**
 * @fileoverview Firestore Security Rules for the NexusTalent platform.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for personal data and
 * role-based access control for shared resources. It prioritizes secure data
 * access based on user identity and role. All writes must be explicitly
 * authorized.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles.  Access is restricted to the
 *   owning user and potentially admins.
 * - /courses/{courseId}: Stores course information. Access is open for reads,
 *   but writes are restricted to trainers or admins.
 * - /courses/{courseId}/modules/{moduleId}: Stores course modules.  Write
 *   access is restricted to course owners.
 * - /enrollments/{enrollmentId}: Stores enrollment records. Access is
 *   restricted to the enrolled user or admins.
 * - /vacancies/{vacancyId}: Stores job postings.  Access is restricted to
 *   recruters and admins.
 * - /applications/{applicationId}: Stores job applications. The document ID is
 *   a composite of `userId_jobPostingId` to enforce uniqueness. Access is
 *   restricted to the applicant and the recruiter who posted the job.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect user privacy.
 * - Data validation is limited to fields critical for authorization and
 *   relational integrity (e.g., ownership fields).
 * - The `userType` field in the `/users/{userId}` document determines user roles.
 *
 * Denormalization for Authorization:
 * - Enrollment documents contain both `userId` and `courseId` to allow for
 *   efficient querying and security rule enforcement without additional reads.
 * - JobPosting documents contain `recruiterId` to simply authorization checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user profiles.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile if the userId in the path matches their auth UID.
     * @allow (get, update, delete) - Authenticated user can get, update, or delete their own profile if the userId in the path matches their auth UID.
     * @deny (create, get, update, delete) - Any other user attempting to access another user's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants read access to all users for courses and restricts write access to trainers and admins.
     * @path /courses/{courseId}
     * @allow (get, list) - Any user can read courses.
     * @allow (create) - Trainers and admins can create courses. `request.resource.data.trainerId` must match the trainer's user ID.
     * @allow (update, delete) - Only the trainer who created the course or an admin can update or delete it.
     * @deny (create, update, delete) - Non-trainers attempting to create or modify courses.
     * @principle Allows public read access with owner-only and admin-only writes for courses.
     */
    match /courses/{courseId} {
        allow get, list: if true;

        allow create: if isSignedIn();
        allow update: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
        allow delete: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Grants access to course modules, restricting write access to course owners.
     * @path /courses/{courseId}/modules/{moduleId}
     *   @allow (get, list) - Any user can read modules.
     *   @allow (create) - Only the course owner can create modules.
     *   @allow (update, delete) - Only the course owner can update or delete modules.
     *   @deny (create, update, delete) - Non-owners attempting to create or modify modules.
     * @principle Enforces owner-only writes for course modules.
     */
    match /courses/{courseId}/modules/{moduleId} {
      allow get, list: if true;
      allow create: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Grants access to enrollment records, restricting access to the enrolled user and admins.
     * @path /enrollments/{enrollmentId}
     * @allow (create) - Authenticated user can create their own enrollment record.
     * @allow (get, update, delete) - Authenticated user can get, update, or delete their own enrollment record.
     * @deny (create, get, update, delete) - Any other user attempting to access another user's enrollment record.
     * @principle Enforces document ownership for enrollment records.
     */
    match /enrollments/{enrollmentId} {
        function isEnrolledUser(userId) {
            return request.auth != null && request.auth.uid == userId;
        }

        allow get: if isSignedIn();
        allow list: if false;
        allow create: if isSignedIn();
        allow update: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
        allow delete: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Grants access to job postings, restricting write access to recruiters and admins.
     * @path /vacancies/{vacancyId}
     * @allow (get, list) - Any user can read job postings.
     * @allow (create) - Only recruiters can create job postings. `request.resource.data.recruiterId` must match the recruiter's user ID.
     * @allow (update, delete) - Only the recruiter who created the job posting or an admin can update or delete it.
     * @deny (create, update, delete) - Non-recruiters attempting to create or modify job postings.
     * @principle Allows public read access with owner-only and admin-only writes for job postings.
     */
    match /vacancies/{vacancyId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Grants access to job applications, restricting access to the applicant and the recruiter who posted the job.
     * @path /applications/{applicationId}
     * @allow (create) - Authenticated user can create their own application. `request.resource.data.userId` must match their auth UID.
     * @allow (get, update, delete) - The applicant or the recruiter who posted the job can access the application.
     * @deny (create, get, update, delete) - Any other user attempting to access the application.
     * @principle Enforces document ownership for applications.
     */
    match /applications/{applicationId} {
        allow get: if isSignedIn();
        allow list: if false;
        allow create: if isSignedIn();
        allow update: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
        allow delete: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    function isSignedIn() {
        return request.auth != null;
    }
  }
}