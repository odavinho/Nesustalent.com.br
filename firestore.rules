/**
  * @file Overview
  * This ruleset enforces a strict user-ownership model for personal data and restricts access to other collections based on roles and relationships.
  *
  * Data Structure:
  * - /users/{userId}: Stores user profiles, accessible only to the user and potentially admins.
  * - /courses/{courseId}: Stores course information, publicly readable, but writes are restricted.
  * - /courses/{courseId}/modules/{moduleId}: Stores course modules, publicly readable, but writes are restricted.
  * - /enrollments/{enrollmentId}: Stores enrollment data, publicly readable, but writes are restricted.
  * - /jobPostings/{jobPostingId}: Stores job postings, publicly readable, but writes are restricted to recruiters.
  * - /applications/{applicationId}: Stores job applications, publicly readable, but writes are restricted to the user who created them.
  *
  * Key Security Decisions:
  * - User listing is disallowed for privacy.
  * - Most collections are publicly readable to promote discovery. Write access is carefully controlled.
  * - The `applicationId` is a composite ID to simplify application ownership checks.
  *
  * Denormalization for Authorization:
  * - The `applicationId` in the `/applications` collection is a composite key (`userId_jobPostingId`), enabling efficient ownership checks without requiring additional reads.
  */
 

 rules_version = '2';
 service cloud.firestore {
  match /databases/{database}/documents {
 

   /**
    * @description Enforces user-only access to their profile data.
    * @path /users/{userId}
    * @allow (create) - User 'alice' can create their own profile: request.auth.uid == 'alice' and request.resource.data.id == 'alice'
    * @allow (get, update, delete) - User 'alice' can read/update/delete their profile: request.auth.uid == 'alice'
    * @deny (create) - User 'bob' cannot create a profile for 'alice': request.auth.uid == 'bob'
    * @deny (get, update, delete) - User 'bob' cannot read/update/delete 'alice's profile: request.auth.uid == 'bob'
    * @principle Enforces document ownership for writes and reads.
    */
   match /users/{userId} {
    function isOwner(userId) {
     return request.auth != null && request.auth.uid == userId;
    }
 

    function isExistingOwner(userId) {
     return isOwner(userId) && resource != null;
    }
 

    allow get: if isOwner(userId);
    allow list: if false;
    allow create: if isOwner(userId) && request.resource.data.id == userId;
    allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
    allow delete: if isExistingOwner(userId);
   }
 

   /**
    * @description Allows public read access to course information, restricts writes.
    * @path /courses/{courseId}
    * @allow (get, list) - Any user can read course information.
    * @deny (create, update, delete) - No user can create, update, or delete courses through client-side rules.
    * @principle Allows public read with restricted writes.
    */
   match /courses/{courseId} {
    allow get, list: if true;
    allow create: if false;
    allow update: if false;
    allow delete: if false;
   }
 

   /**
    * @description Allows public read access to course modules, restricts writes.
    * @path /courses/{courseId}/modules/{moduleId}
    * @allow (get, list) - Any user can read module information.
    * @deny (create, update, delete) - No user can create, update, or delete modules through client-side rules.
    * @principle Allows public read with restricted writes.
    */
   match /courses/{courseId}/modules/{moduleId} {
    allow get, list: if true;
    allow create: if false;
    allow update: if false;
    allow delete: if false;
   }
 

   /**
    * @description Allows public read access to enrollment records, restricts writes.
    * @path /enrollments/{enrollmentId}
    * @allow (get, list) - Any user can read enrollment information.
    * @deny (create, update, delete) - No user can create, update, or delete enrollments through client-side rules.
    * @principle Allows public read with restricted writes.
    */
   match /enrollments/{enrollmentId} {
    allow get, list: if true;
    allow create: if false;
    allow update: if false;
    allow delete: if false;
   }
 

   /**
    * @description Allows public read access to job postings, restricts writes.
    * @path /jobPostings/{jobPostingId}
    * @allow (get, list) - Any user can read job postings.
    * @deny (create, update, delete) - No user can create, update, or delete job postings through client-side rules.
    * @principle Allows public read with restricted writes.
    */
   match /jobPostings/{jobPostingId} {
    allow get, list: if true;
    allow create: if false;
    allow update: if false;
    allow delete: if false;
   }
 

   /**
    * @description Enforces user-only access to their job applications.
    * @path /applications/{applicationId}
    * @allow (create) - User 'alice' can create their own application: request.auth.uid == 'alice' if applicationId matches 'alice_{jobPostingId}'.
    * @allow (get, update, delete) - User 'alice' can read/update/delete their application: request.auth.uid == 'alice' if applicationId matches 'alice_{jobPostingId}'.
    * @deny (create) - User 'bob' cannot create an application for 'alice': request.auth.uid == 'bob'
    * @deny (get, update, delete) - User 'bob' cannot read/update/delete 'alice's application: request.auth.uid == 'bob'
    * @principle Enforces document ownership for writes and reads.
    */
   match /applications/{applicationId} {
    function isOwner(applicationId) {
     let userId = applicationId.split("_")[0];
     return request.auth != null && request.auth.uid == userId;
    }
 

    function isExistingOwner(applicationId) {
     return isOwner(applicationId) && resource != null;
    }
 

    allow get: if isOwner(applicationId);
    allow list: if true;
    allow create: if isOwner(applicationId);
    allow update: if isExistingOwner(applicationId);
    allow delete: if isExistingOwner(applicationId);
   }
  }
 }