/**
 * @file Firebase Security Rules for NexusTalent Platform
 *
 * @description This ruleset enforces a user-ownership model for personal data and role-based access control where appropriate.
 * Data is organized into top-level collections for courses, job postings, and enrollments, with user-specific data nested under `/users/{userId}`.
 *
 * @security-decisions
 * - Users can only read and write their own user documents.
 * - Courses are publicly readable, but only trainers can create, update, or delete them.
 * - Job postings are publicly readable, but only recruiters can create, update, or delete them.
 * - Applications can only be created by a user for themself.
 * - Listing of the applications collection is denied.
 * - The rules prioritize authorization and relational integrity checks. Data-type and schema validation is not performed in this prototyping phase.
 *
 * @denormalization-for-authorization
 * - Ownership: Documents in user-owned subcollections must contain a `userId` field matching the document ID in the path.
 *
 * @structural-segregation
 * - Public vs. Private: Uses separate collections for public (courses, job postings) and private (user profiles) data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Requires authentication for certain operations.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Enforces user ownership.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user ID matches the user ID of the existing document.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Enforces user ownership for existing documents.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) User 'user_abc' can create their own profile with matching ID.
     * @allow (get, update, delete) User 'user_abc' can access and modify their own profile.
     * @deny (create) User 'user_xyz' cannot create a profile with ID 'user_abc'.
     * @deny (get, update, delete) User 'user_xyz' cannot access or modify User 'user_abc' profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // User listing is disabled for privacy.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for courses.
     * @path /courses/{courseId}
     * @allow (get, list) Any user can read courses.
     * @deny (create, update, delete) Only trainers can create, update, or delete courses.  // TODO: Implement trainer role check
     * @principle Allows public read access with restricted write access.
     */
    match /courses/{courseId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add trainer role validation once the schema is updated with a trainer role field.
    }

    /**
     * @description Rules for course modules within a specific course.
     * @path /courses/{courseId}/modules/{moduleId}
     * @allow (get, list) Any user can read course modules.
     * @deny (create, update, delete) Only trainers can create, update, or delete course modules. // TODO: Implement trainer role check
     * @principle Allows public read access with restricted write access based on the course's trainer.
     */
    match /courses/{courseId}/modules/{moduleId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add trainer role validation once the schema is updated with a trainer role field.
    }

    /**
     * @description Rules for enrollments.
     * @path /enrollments/{enrollmentId}
     * @allow (get, list) Only the owner user can get, and list their enrollments.
     * @allow (create) A user can create an enrollment for themselves.
     * @deny (update, delete) Enrollment updates and deletions are not allowed via client.
     * @principle Enforces user-specific data access.
     */
    match /enrollments/{enrollmentId} {
      allow get: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow list: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if false;
    }

    /**
     * @description Rules for job postings.
     * @path /jobPostings/{jobPostingId}
     * @allow (get, list) Any user can read job postings.
     * @deny (create, update, delete) Only recruiters can create, update, or delete job postings. // TODO: Implement recruiter role check
     * @principle Allows public read access with restricted write access.
     */
    match /jobPostings/{jobPostingId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add recruiter role validation once the schema is updated with a recruiter role field.
    }

    /**
     * @description Rules for applications.
     * @path /applications/{applicationId}
     * @allow (create) A user can create an application for themselves.
     * @deny (get, update, delete, list) No direct access to application documents.
     * @principle Restricts access to application data.
     */
    match /applications/{applicationId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if false;
      allow delete: if false;
    }
  }
}