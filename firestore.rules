rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile if the userId matches their auth.uid.
     * @allow (get, update, delete) - Authenticated user can get, update, or delete their own profile if the userId matches their auth.uid.
     * @deny (list) - Listing users is not allowed.
     * @deny (create) - Unauthenticated users cannot create profiles.
     * @deny (update, delete) - Users cannot modify or delete other user profiles.
     * @principle Enforces document ownership for writes and restricts listing of users.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.auth.uid == request.resource.data.uid;
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to courses.
     * @path /courses/{courseId}
     * @allow (get, list) - Anyone can read course information.
     * @allow (create) - Only trainers can create courses. The trainerId must match their auth.uid.
     * @allow (update, delete) - Only the trainer who created the course can update or delete it.
     * @deny (create) - Unauthenticated users cannot create courses.
     * @deny (update, delete) - Users cannot modify or delete courses they don't own.
     * @principle Enforces document ownership for writes and allows public reads.
     */
    match /courses/{courseId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isTrainer(trainerId) {
        return request.auth.uid == trainerId;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && isTrainer(request.resource.data.trainerId);
      allow update: if isSignedIn() && isTrainer(resource.data.trainerId);
      allow delete: if isSignedIn() && isTrainer(resource.data.trainerId);
    }

    /**
     * @description Controls access to course modules.
     * @path /courses/{courseId}/modules/{moduleId}
     * @allow (get, list) - Anyone can read course module information.
     * @allow (create) - Only trainers who own the course can create modules.
     * @allow (update, delete) - Only the trainer who owns the course can update or delete modules.
     * @deny (create) - Unauthenticated users cannot create modules.
     * @deny (update, delete) - Users cannot modify or delete modules for courses they don't own.
     * @principle Enforces document ownership for writes and allows public reads.
     */
    match /courses/{courseId}/modules/{moduleId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isTrainerOfCourse(courseId) {
        return get(/databases/$(database)/documents/courses/$(courseId)).data.trainerId == request.auth.uid;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && isTrainerOfCourse(courseId);
      allow update: if isSignedIn() && isTrainerOfCourse(courseId);
      allow delete: if isSignedIn() && isTrainerOfCourse(courseId);
    }

    /**
     * @description Controls access to enrollments.
     * @path /enrollments/{enrollmentId}
     * @allow (get, list) - Only the enrolled user can read their own enrollment information.
     * @allow (create) - Users can create their own enrollment records. The userId must match their auth.uid.
     * @allow (update, delete) - Only the enrolled user can update or delete their enrollment record.
     * @deny (create) - Unauthenticated users cannot create enrollment records.
     * @deny (update, delete) - Users cannot modify or delete enrollment records they don't own.
     * @principle Enforces document ownership for writes and restricts listing of users.
     */
    match /enrollments/{enrollmentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }


      function isEnrolledUser() {
        return request.auth.uid == resource.data.userId;
      }

      allow get: if isSignedIn() && isEnrolledUser();
      allow list: if false;
      allow create: if isSignedIn() && isOwner(request.resource.data.userId);
      allow update: if isSignedIn() && isEnrolledUser();
      allow delete: if isSignedIn() && isEnrolledUser();
    }

    /**
     * @description Controls access to job postings.
     * @path /jobPostings/{jobPostingId}
     * @allow (get, list) - Anyone can read job postings.
     * @allow (create) - Only recruiters can create job postings. The recruiterId must match their auth.uid.
     * @allow (update, delete) - Only the recruiter who created the job posting can update or delete it.
     * @deny (create) - Unauthenticated users cannot create job postings.
     * @deny (update, delete) - Users cannot modify or delete job postings they don't own.
     * @principle Enforces document ownership for writes and allows public reads.
     */
    match /jobPostings/{jobPostingId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isRecruiter(recruiterId) {
        return request.auth.uid == recruiterId;
      }


      allow get, list: if true;
      allow create: if isSignedIn() && isRecruiter(request.resource.data.recruiterId);
      allow update: if isSignedIn() && isRecruiter(resource.data.recruiterId);
      allow delete: if isSignedIn() && isRecruiter(resource.data.recruiterId);
    }

    /**
     * @description Controls access to applications.
     * @path /applications/{applicationId}
     * @allow (get, list) - Anyone can read job applications.
     * @allow (create) - Users can create job applications. The userId must match their auth.uid.
     * @allow (update, delete) - Only the user who created the application can update or delete it.
     * @deny (create) - Unauthenticated users cannot create job applications.
     * @deny (update, delete) - Users cannot modify or delete job applications they don't own.
     * @principle Enforces document ownership for writes and allows public reads.
     */
    match /applications/{applicationId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && isOwner(request.resource.data.userId);
      allow update: if isSignedIn() && isOwner(resource.data.userId);
      allow delete: if isSignedIn() && isOwner(resource.data.userId);
    }
  }
}