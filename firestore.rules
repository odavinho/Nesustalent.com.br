/**
 * @file Firestore Security Rules for NexusTalent Platform
 * @version Prototyping Mode - Data shape is not enforced, authorization is strictly enforced.
 *
 * @Core Philosophy:
 * This ruleset enforces a user-ownership model for personal data and role-based access for courses, job postings, and applications.
 *
 * @Data Structure:
 * - Users: /users/{userId}
 * - Courses: /courses/{courseId}
 * - Course Modules: /courses/{courseId}/modules/{moduleId}
 * - Enrollments: /enrollments/{enrollmentId}
 * - Job Postings: /jobPostings/{jobPostingId}
 * - Applications: /applications/{applicationId}
 *
 * @Key Security Decisions:
 * - Users can only access their own data under /users/{userId}.
 * - Public read access is generally disallowed unless explicitly required.
 * - List operations are secured based on ownership or role.
 * - The `applicationId` is a composite of `userId_jobPostingId` to ensure uniqueness and simplify security rules for applications.
 *
 * @Denormalization for Authorization:
 * - Course documents have `trainerId` for trainer-specific authorization.
 * - Applications have `userId` and `jobPostingId` for applicant and job posting relationship.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile if authenticated as 'user123'.
     * @allow (get, update, delete) User with ID 'user123' can access/modify their profile if authenticated as 'user123'.
     * @deny (create) User with ID 'user123' cannot create a profile if authenticated as a different user.
     * @deny (get, update, delete) User with ID 'user123' cannot access/modify another user's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      // Helper function to check if the authenticated user is the owner of the document.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Helper function to check if the authenticated user is the owner of an existing document.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Listing users is not allowed.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to courses.
     * @path /courses/{courseId}
     * @allow (get, list) Anyone can view the course details and list courses.
     * @allow (create) Only a trainer (userType == "trainer") can create courses and the trainerId must match their user ID.
     * @allow (update, delete) Only the trainer who created the course (trainerId) can update or delete it.
     * @deny (create) A non-trainer cannot create courses.
     * @deny (update, delete) A trainer cannot update or delete a course they didn't create.
     * @principle Enforces role-based access for course creation and ownership for updates/deletes.
     */
    match /courses/{courseId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true; // Courses are publicly readable.
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.trainerId;
      allow update: if isSignedIn() && resource.data.trainerId == request.auth.uid && resource != null;
      allow delete: if isSignedIn() && resource.data.trainerId == request.auth.uid && resource != null;
    }

    /**
     * @description Controls access to course modules within a course.
     * @path /courses/{courseId}/modules/{moduleId}
     * @allow (get, list) Anyone can view the course modules and list them.
     * @allow (create) Only the trainer of the course (trainerId in the parent course) can create modules.
     * @allow (update, delete) Only the trainer of the course can update or delete modules.
     * @deny (create) Non-trainers and trainers not associated with the course cannot create modules.
     * @deny (update, delete) Non-trainers and trainers not associated with the course cannot update or delete modules.
     * @principle Enforces role-based access to course modules based on the parent course's trainer.
     */
    match /courses/{courseId}/modules/{moduleId} {
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the authenticated user is the trainer of the parent course.
      function isTrainerOfCourse(courseId) {
        return isSignedIn() && get(/databases/$(database)/documents/courses/$(courseId)).data.trainerId == request.auth.uid;
      }
      allow get, list: if true; // Modules are publicly readable.
      allow create: if isTrainerOfCourse(courseId);
      allow update: if isTrainerOfCourse(courseId) && resource != null;
      allow delete: if isTrainerOfCourse(courseId) && resource != null;
    }

    /**
     * @description Controls access to enrollments.
     * @path /enrollments/{enrollmentId}
     * @allow (get) Anyone can get enrollment
     * @allow (create) Signed in user
     * @allow (list) Not available
     * @allow (update) Signed in user
     * @allow (delete) Signed in user
     * @deny ()
     * @principle
     */
    match /enrollments/{enrollmentId} {
          function isSignedIn() {
            return request.auth != null;
          }
          allow get: if true;
          allow list: if false;
          allow create: if isSignedIn();
          allow update: if isSignedIn() && resource != null;
          allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Controls access to job postings.
     * @path /jobPostings/{jobPostingId}
     * @allow (get, list) Anyone can view job postings.
     * @allow (create) Only a recruiter (userType == "recruiter") can create job postings and the recruiterId must match their user ID.
     * @allow (update, delete) Only the recruiter who created the job posting can update or delete it.
     * @deny (create) A non-recruiter cannot create job postings.
     * @deny (update, delete) A recruiter cannot update or delete a job posting they didn't create.
     * @principle Enforces role-based access for job posting creation and ownership for updates/deletes.
     */
    match /jobPostings/{jobPostingId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true; // Job postings are publicly readable.
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.recruiterId;
      allow update: if isSignedIn() && resource.data.recruiterId == request.auth.uid && resource != null;
      allow delete: if isSignedIn() && resource.data.recruiterId == request.auth.uid && resource != null;
    }

    /**
     * @description Controls access to job applications.
     * @path /applications/{applicationId}
     * @allow (create) User can create an application if the userId in the application matches their auth.uid.
     * @allow (get) Anyone can get the application.
     * @allow (update, delete) User can update/delete an application if the userId in the application matches their auth.uid.
     * @deny (create) User cannot create an application for another user.
     * @deny (update, delete) User cannot update/delete an application for another user.
     * @principle Enforces document ownership for applications.
     */
    match /applications/{applicationId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if true; // Anyone can read the application
      allow list: if true;
      allow create: if isOwner(request.resource.data.userId);
      allow update: if isOwner(resource.data.userId) && resource != null;
      allow delete: if isOwner(resource.data.userId) && resource != null;
    }
  }
}