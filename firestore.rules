rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the user can read/write their own profile.
     * @path /users/{userId}
     * @allow (create) User with id 'user123' can create their profile.
     *   `request.auth.uid == 'user123'` and `request.resource.data.id == 'user123'`.
     * @allow (get, update, delete) User with id 'user123' can read/update/delete their profile.
     *   `request.auth.uid == 'user123'` and `resource.data.id == 'user123'`.
     * @deny (create) User with id 'user456' cannot create a profile with id 'user123'.
     *   `request.auth.uid == 'user456'` and `request.resource.data.id == 'user123'`.
     * @deny (get, update, delete) User with id 'user456' cannot read/update/delete profile of 'user123'.
     *   `request.auth.uid == 'user456'` and `resource.data.id == 'user123'`.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the document
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the user is an existing owner of the document
      function isExistingOwner(userId) {
        return isOwner(userId) && existsAfter(/databases/$(database)/documents/users/$(userId));
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure course documents. Anyone can read course details, but only the trainer can create/update/delete.
     * @path /courses/{courseId}
     * @allow (get, list) Anyone can read or list courses.
     * @allow (create) Trainer with id 'trainer123' can create a course.
     *   `request.auth.uid == 'trainer123'` and `request.resource.data.trainerId == 'trainer123'`.
     * @allow (update, delete) Trainer with id 'trainer123' can update/delete the course.
     *   `request.auth.uid == 'trainer123'` and `resource.data.trainerId == 'trainer123'`.
     * @deny (create) User with id 'user456' cannot create a course with trainerId 'trainer123'.
     *   `request.auth.uid == 'user456'` and `request.resource.data.trainerId == 'trainer123'`.
     * @deny (update, delete) User with id 'user456' cannot update/delete a course with trainerId 'trainer123'.
     *   `request.auth.uid == 'user456'` and `resource.data.trainerId == 'trainer123'`.
     * @principle Public read, owner-only writes.
     */
    match /courses/{courseId} {
       // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the trainer of the course
      function isTrainer(trainerId) {
        return request.auth.uid == trainerId;
      }

      // Helper function to check if the user is the existing trainer of the course
      function isExistingTrainer(trainerId) {
        return isTrainer(trainerId) && existsAfter(/databases/$(database)/documents/courses/$(courseId));
      }
      
      allow get, list: if true;
      allow create: if isSignedIn() && isTrainer(request.resource.data.trainerId);
      allow update: if isSignedIn() && isTrainer(request.resource.data.trainerId);
      allow delete: if isSignedIn() && isTrainer(getAfter().data.trainerId);
    }

    /**
     * @description Secure course modules. Anyone can read the modules, but only the course trainer can create/update/delete.
     * @path /courses/{courseId}/modules/{moduleId}
     * @allow (get, list) Anyone can read/list modules for a course.
     * @allow (create) Trainer for course 'course123' can create a module.
     *   `request.auth.uid == get(/databases/$(database)/documents/courses/course123).data.trainerId`.
     * @allow (update, delete) Trainer for course 'course123' can update/delete a module.
     *   `request.auth.uid == get(/databases/$(database)/documents/courses/course123).data.trainerId`.
     * @deny (create) User with id 'user456' cannot create a module for course 'course123'.
     *   `request.auth.uid == 'user456'` and
     *   `get(/databases/$(database)/documents/courses/course123).data.trainerId != 'user456'`.
     * @deny (update, delete) User with id 'user456' cannot update/delete a module for course 'course123'.
     *   `request.auth.uid == 'user456'` and
     *   `get(/databases/$(database)/documents/courses/course123).data.trainerId != 'user456'`.
     * @principle Public read, trainer-only writes (requires `get()` on parent).
     */
    match /courses/{courseId}/modules/{moduleId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

       // Helper function to check if the user is the trainer of the course, requires get()
      function isTrainerOfCourse(courseId) {
        return isSignedIn() && request.auth.uid == get(/databases/$(database)/documents/courses/$(courseId)).data.trainerId;
      }

      // Helper function to check if the user is the existing trainer of the course, requires get()
      function isExistingTrainerOfCourse(courseId) {
        return isTrainerOfCourse(courseId) && existsAfter(/databases/$(database)/documents/courses/$(courseId)/modules/$(moduleId));
      }

      allow get, list: if true;
      allow create: if isSignedIn() && isTrainerOfCourse(courseId);
      allow update: if isSignedIn() && isTrainerOfCourse(courseId);
      allow delete: if isSignedIn() && isTrainerOfCourse(courseId);
    }

    /**
     * @description Secure enrollment records. Only the user can read/write their own enrollment records.
     * @path /enrollments/{enrollmentId}
     * @allow (create) User with id 'user123' can create an enrollment record.
     *   `request.auth.uid == 'user123'` and `request.resource.data.userId == 'user123'`.
     * @allow (get, update, delete) User with id 'user123' can read/update/delete their enrollment record.
     *   `request.auth.uid == 'user123'` and `resource.data.userId == 'user123'`.
     * @deny (create) User with id 'user456' cannot create an enrollment record with userId 'user123'.
     *   `request.auth.uid == 'user456'` and `request.resource.data.userId == 'user123'`.
     * @deny (get, update, delete) User with id 'user456' cannot read/update/delete enrollment record of 'user123'.
     *   `request.auth.uid == 'user456'` and `resource.data.userId == 'user123'`.
     * @principle Enforces document ownership for all operations.
     */
    match /enrollments/{enrollmentId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the document
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to get userId from resource data
      function getUserId() {
        return request.resource.data.userId;
      }

      // Helper function to check if the user is the existing owner of the document
      function isExistingOwner(userId) {
        return isOwner(userId) && existsAfter(/databases/$(database)/documents/enrollments/$(enrollmentId));
      }

      allow get: if isSignedIn() && isOwner(resource.data.userId);
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isOwner(resource.data.userId);
      allow delete: if isSignedIn() && isOwner(resource.data.userId);
    }

    /**
     * @description Secure job postings. Anyone can read job postings, but only the recruiter can create/update/delete.
     * @path /jobPostings/{jobPostingId}
     * @allow (get, list) Anyone can read or list job postings.
     * @allow (create) Recruiter with id 'recruiter123' can create a job posting.
     *   `request.auth.uid == 'recruiter123'` and `request.resource.data.recruiterId == 'recruiter123'`.
     * @allow (update, delete) Recruiter with id 'recruiter123' can update/delete the job posting.
     *   `request.auth.uid == 'recruiter123'` and `resource.data.recruiterId == 'recruiter123'`.
     * @deny (create) User with id 'user456' cannot create a job posting with recruiterId 'recruiter123'.
     *   `request.auth.uid == 'user456'` and `request.resource.data.recruiterId == 'recruiter123'`.
     * @deny (update, delete) User with id 'user456' cannot update/delete a job posting with recruiterId 'recruiter123'.
     *   `request.auth.uid == 'user456'` and `resource.data.recruiterId == 'recruiter123'`.
     * @principle Public read, owner-only writes.
     */
    match /jobPostings/{jobPostingId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the recruiter of the job posting
      function isRecruiter(recruiterId) {
        return request.auth.uid == recruiterId;
      }

      // Helper function to check if the user is the existing recruiter of the job posting
      function isExistingRecruiter(recruiterId) {
        return isRecruiter(recruiterId) && existsAfter(/databases/$(database)/documents/jobPostings/$(jobPostingId));
      }

      allow get, list: if true;
      allow create: if isSignedIn() && isRecruiter(request.resource.data.recruiterId);
      allow update: if isSignedIn() && isRecruiter(request.resource.data.recruiterId);
      allow delete: if isSignedIn() && isRecruiter(getAfter().data.recruiterId);
    }

    /**
     * @description Secure job applications. Only the user can read/write their own job applications.
     * @path /applications/{applicationId}
     * @allow (create) User with id 'user123' can create a job application.
     *   `request.auth.uid == 'user123'` and `request.resource.data.userId == 'user123'`.
     * @allow (get, update, delete) User with id 'user123' can read/update/delete their job application.
     *   `request.auth.uid == 'user123'` and `resource.data.userId == 'user123'`.
     * @deny (create) User with id 'user456' cannot create a job application with userId 'user123'.
     *   `request.auth.uid == 'user456'` and `request.resource.data.userId == 'user123'`.
     * @deny (get, update, delete) User with id 'user456' cannot read/update/delete job application of 'user123'.
     *   `request.auth.uid == 'user456'` and `resource.data.userId == 'user123'`.
     * @principle Enforces document ownership for all operations.
     */
    match /applications/{applicationId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the document
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

       // Helper function to get userId from resource data
       function getUserId() {
        return request.resource.data.userId;
      }

      // Helper function to check if the user is the existing owner of the document
      function isExistingOwner(userId) {
        return isOwner(userId) && existsAfter(/databases/$(database)/documents/applications/$(applicationId));
      }

      allow get: if isSignedIn() && isOwner(resource.data.userId);
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isOwner(resource.data.userId);
      allow delete: if isSignedIn() && isOwner(resource.data.userId);
    }
  }
}