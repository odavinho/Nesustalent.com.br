/**
 * @fileoverview Firestore Security Rules for NexusTalent Platform.
 *
 * Core Philosophy:
 * This ruleset enforces a user-centric security model with ownership-based access control for personal data,
 * and role-based access control for administrative functions. It leverages denormalization and structural
 * segregation to ensure clear ownership and simplified security rules.
 *
 * Data Structure:
 * - /users/{userId}: User profiles. Only the authenticated user can read/write their own profile.
 * - /courses/{courseId}: Course information. Publicly readable.
 * - /courses/{courseId}/modules/{moduleId}: Course modules. Publicly readable.
 * - /enrollments/{enrollmentId}: Enrollment records. Publicly readable, as only users can create enrollment records,
 *   given userId and courseId.
 * - /jobPostings/{jobPostingId}: Job postings. Publicly readable.
 * - /applications/{applicationId}: Job applications. Publicly readable.
 *
 * Key Security Decisions:
 * - Users can only manage their own profiles.
 * - Public read access is granted to courses, modules, job postings and enrollments for open discoverability.
 * - The application id is composite, incorporating both userId and jobPostingId, to guarantee application uniqueness.
 * - Listing of all applications, courses, modules, enrollments, and job postings is allowed.
 *
 * Denormalization for Authorization:
 * - The `Application` document ID is constructed as `userId_jobPostingId` to allow path-based access control
 *   and avoid the need for complex queries.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user profiles.
     * @path /users/{userId}
     * @allow (create, update, delete): Authenticated user can manage their own profile.
     * @allow (get, list): Authenticated user can read their own profile.
     * @deny (create, update, delete): Another user attempts to manage a different user's profile.
     * @deny (get, list): Another user attempts to read a different user's profile.
     * @principle Enforces user-ownership for profile management.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Grants public read access to courses and restricts write access to authenticated users.
     * @path /courses/{courseId}
     * @allow (get, list): Anyone can read course information.
     * @allow (create): Any authenticated user can create a course.
     * @allow (update, delete): Only the trainer who created the course can update or delete it.
     * @deny (create, update, delete): Unauthenticated users cannot create, update, or delete courses.
     * @principle Allows public read access while restricting write access to authorized trainers.
     */
    match /courses/{courseId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Grants public read access to course modules and restricts write access to authenticated users.
     * @path /courses/{courseId}/modules/{moduleId}
     * @allow (get, list): Anyone can read module information.
     * @allow (create): Any authenticated user can create a module.
     * @allow (update, delete): Only the course creator can update or delete the module.
     * @deny (create, update, delete): Unauthenticated users cannot create, update, or delete modules.
     * @principle Allows public read access while restricting write access to authorized trainers.
     */
    match /courses/{courseId}/modules/{moduleId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Grants public read access to enrollment records.
     * @path /enrollments/{enrollmentId}
     * @allow (get, list): Anyone can read enrollment information.
     * @allow (create): Any authenticated user can create an enrollment.
     * @allow (update, delete): No one can update or delete an enrollment.
     * @deny (create): Unauthenticated users cannot create enrollments.
     * @principle Allows public read access while restricting write access to authorized users.
     */
    match /enrollments/{enrollmentId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Grants public read access to job postings.
     * @path /jobPostings/{jobPostingId}
     * @allow (get, list): Anyone can read job posting information.
     * @allow (create): Any authenticated user can create a job posting.
     * @allow (update, delete): Only the recruiter who created the job posting can update or delete it.
     * @deny (create, update, delete): Unauthenticated users cannot create, update, or delete job postings.
     * @principle Allows public read access while restricting write access to authorized recruiters.
     */
    match /jobPostings/{jobPostingId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Grants public read access to job applications.
     * @path /applications/{applicationId}
     * @allow (get, list): Anyone can read job application information.
     * @allow (create): Any authenticated user can create a job application.
     * @allow (update, delete): Only the applicant who created the job application can update or delete it.
     * @deny (create, update, delete): Unauthenticated users cannot create, update, or delete job applications.
     * @principle Allows public read access while restricting write access to authorized applicants.
     */
    match /applications/{applicationId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && request.resource.data.userId == resource.data.userId; // Simplified owner validation
      allow delete: if isSignedIn() && request.resource.data.userId == resource.data.userId; // Simplified owner validation
    }
  }
}