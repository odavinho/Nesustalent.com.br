// This file is generated by Firebase Studio.
'use server';
/**
 * @fileOverview AI-powered resume/CV analysis for employers.
 *
 * - aiResumeAnalysis - A function that handles the resume analysis process.
 * - AIResumeAnalysisInput - The input type for the aiResumeAnalysis function.
 * - AIResumeAnalysisOutput - The return type for the aiResumeAnalysis function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const AIResumeAnalysisInputSchema = z.object({
  jobDescription: z.string().describe('The description of the job.'),
  resumeDataUri: z
    .string()
    .describe(
      "A resume or CV, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'."
    ),
});
export type AIResumeAnalysisInput = z.infer<typeof AIResumeAnalysisInputSchema>;

const AIResumeAnalysisOutputSchema = z.object({
  candidateRanking: z.number().describe('The ranking of the candidate (1-100).'),
  candidateSummary: z.string().describe('A summary of the candidate.'),
  keySkillsMatch: z.string().describe('Key skills that match the job description.'),
  areasForImprovement: z.string().describe('Areas for improvement for the candidate.'),
});
export type AIResumeAnalysisOutput = z.infer<typeof AIResumeAnalysisOutputSchema>;

export async function aiResumeAnalysis(input: AIResumeAnalysisInput): Promise<AIResumeAnalysisOutput> {
  return aiResumeAnalysisFlow(input);
}

const prompt = ai.definePrompt({
  name: 'aiResumeAnalysisPrompt',
  input: {schema: AIResumeAnalysisInputSchema},
  output: {schema: AIResumeAnalysisOutputSchema},
  prompt: `You are an expert recruiter specializing in candidate evaluation.

You will use this information to evaluate the candidate, and rank them based on their resume.

Job Description: {{{jobDescription}}}

Resume: {{media url=resumeDataUri}}

Candidate Ranking (1-100): Rank the candidate from 1 to 100, with 100 being the best candidate.
Candidate Summary: Summarize the candidate's resume.
Key Skills Match: List the key skills that match the job description.
Areas for Improvement: List areas for improvement for the candidate.`,
});

const aiResumeAnalysisFlow = ai.defineFlow(
  {
    name: 'aiResumeAnalysisFlow',
    inputSchema: AIResumeAnalysisInputSchema,
    outputSchema: AIResumeAnalysisOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
